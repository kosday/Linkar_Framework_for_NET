<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linkar.Commands</name>
    </assembly>
    <members>
        <member name="T:Linkar.Commands.NamespaceDoc">
            <summary>
            Linkar.Commands library namespace.
            </summary>
        </member>
        <member name="T:Linkar.Commands.DirectCommands">
            <summary>
            These functions perform synchronous direct (without establishing permanent session) operations with any kind of output format type.
            </summary>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendCommand(Linkar.CredentialOptions,System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows a variety of direct operations using standard templates (XML, JSON), synchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendCommandAsync(Linkar.CredentialOptions,System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows a variety of direct operations using standard JSON or XML templates, asynchronously.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendJsonCommand(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows a variety of direct operations using standard JSON templates, synchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Direct;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}";
                            result = DirectCommands.SendJsonCommand(credentials, command);
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Direct;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}"
                        result = DirectCommands.SendJsonCommand(credentials, command)
                    Catch ex As Exception
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendJsonCommandAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows a variety of direct operations using standard JSON templates, asynchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Direct;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}";
                            result = DirectCommands.SendJsonCommandAsync(credentials, command).Result;
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Direct;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}"
                        result = DirectCommands.SendJsonCommandAsync(credentials, command).Result
                    Catch ex As Exception
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendXmlCommand(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows a variety of direct operations using standard XML templates, synchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param> 
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Direct;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            string command = 
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;";
                            result = DirectCommands.SendXmlCommand(credentials, command);
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Direct;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        string command =
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;"
                        result = DirectCommands.SendXmlCommand(credentials, command)
                        
                    Catch ex As Exception
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.DirectCommands.SendXmlCommandAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows a variety of asynchronous direct operations using standard XML templates, asynchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Direct;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            string command = 
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;";
                            result = DirectCommands.SendXmlCommandAsync(credentials, command).Result;
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Direct;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        string command =
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;"
                        result = DirectCommands.SendXmlCommandAsync(credentials, command).Result
                        
                    Catch ex As Exception
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="T:Linkar.Commands.Persistent.NamespaceDoc">
            <summary>
            Linkar.Commands.Persistent library namespace.
            </summary>
        </member>
        <member name="T:Linkar.Commands.Persistent.LinkarClient">
            <summary>
            These functions perform synchronous persistent (establishing permanent session) operations with any kind of output format type.
            </summary>
        </member>
        <member name="P:Linkar.Commands.Persistent.LinkarClient.SessionID">
            <summary>
            SessionID of the connection.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinkarClt class.
            </summary>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely. When the receiveTimeout argument is omitted in any operation, the value set here will be applied.</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.Login(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, synchronously only.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <remarks>
            Login is actually a "virtual" operation which creates a new Client Session ID. No DBMS login is performed unless Linkar SERVER determines new Database Sessions are required. These operations are not related.
            </remarks> 
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.LoginAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, in a asynchronous way.
            </summary>
            <param name="credentialOptions">Object with data necessary to access the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <remarks>
            Login is actually a "virtual" operation which creates a new Client Session ID. No DBMS login is performed unless Linkar SERVER determines new Database Sessions are required - these operations are not related.
            </remarks> 
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.Logout(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, synchronously only.
            </summary>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <remarks>
            Logout is actually a "virtual" operation which disposes the current Client Session ID. No DBMS logout is performed.
            </remarks>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.LogoutAsync(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, in a asynchronous way.
            </summary>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <remarks>
            Logout is actually a "virtual" operation which disposes the current Client Session ID. No DBMS logout is performed.
            </remarks>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendCommand(System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows a variety of persistent operations using standard templates (XML, JSON), synchronously only.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendCommandAsync(System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows a variety of persistent operations using standard JSON templates, in a asynchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendJsonCommand(System.String,System.Int32)">
            <summary>
            Allows a variety of persistent operations using standard JSON templates, synchronously only.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Persistent;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            LinkarClient client = new LinkarClient();
                            client.Login(credentials);
                            string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}";
                            result = client.SendJsonCommand(command);
                            client.Logout();
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Persistent;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        Dim client As LinkarClient = New LinkarClient()
            
                        client.Login(credentials)
                        string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}"
                        result = client.SendJsonCommand(command)
                        client.Logout()
            
                    Catch ex As Exception
            
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendJsonCommandAsync(System.String,System.Int32)">
            <summary>
            Allows a variety of persistent operations using standard JSON templates, in a asynchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Persistent;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            LinkarClient client = new LinkarClient();
                            client.Login(credentials);
                            string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}";
                            result = client.SendJsonCommandAsync(command).Result;
                            client.Logout();
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Persistent;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        Dim client As LinkarClient = New LinkarClient()
            
                        client.Login(credentials)
                        string command =
                                "{" +
                                "	\"NAME\" : \"READ\"," +
                                "	\"COMMAND\" :" + 
                                "	{" +
                                "		\"CALCULATED\" : \"True\" ," +
                                "		\"OUTPUT_FORMAT\" : \"JSON_DICT\" ," +
                                "		\"FILE_NAME\" : \"LK.CUSTOMERS\" ," +
                                "		\"RECORDS\" : [" +
                                "			{ \"LKITEMID\" : \"2\" }" +
                                "		]" +
                                "	}" +
                                "}"
                        result = client.SendJsonCommandAsync(command).Result
                        client.Logout()
            
                    Catch ex As Exception
            
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendXmlCommand(System.String,System.Int32)">
            <summary>
            Allows a variety of persistent operations using standard XML templates, synchronously only.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Persistent;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            LinkarClient client = new LinkarClient();
                            client.Login(credentials);
                            string command =
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;"
                            result = client.SendXmlCommand(command);
                            client.Logout();
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Persistent;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        Dim client As LinkarClient = New LinkarClient()
            
                        client.Login(credentials)
                        string command = 
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;
                        result = client.SendXmlCommand(command)
                        client.Logout()
            
                    Catch ex As Exception
            
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendXmlCommandAsync(System.String,System.Int32)">
            <summary>
            Allows a variety of asynchronous persistent operations using standard XML templates.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">Maximum time in seconds that the client will wait for a response from the server. Default = 0 to wait indefinitely.</param>
            <returns>The results of the operation.</returns>
            <example>
            <code lang="CS">
            using Linkar;
            using Linkar.Commands.Persistent;
            
            class Test
                {
                    public string MySendCommand()
                    {
                        string result = "";
                        try
                        {
                            CredentialOptions credentials = new CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin");
                            LinkarClient client = new LinkarClient();
                            client.Login(credentials);
                            string command =
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;"
                            result = client.SendXmlCommandAsync(command).Result;
                            client.Logout();
                        }
                        catch (Exception ex)
                        {
                            string error = ex.Message;
                            // Do something
                        }
                        return result;
                    }
                }
            </code>
            <code lang="VB">
            Imports Linkar
            using Linkar.Commands.Persistent;
            
            Class Test
            
                Public Function MySendCommand() As String
            
                    Dim result As String = ""
            
                    Try
                        Dim credentials As CredentialOptions = New CredentialOptions("127.0.0.1", "EPNAME", 11300, "admin", "admin")
            
                        Dim client As LinkarClient = New LinkarClient()
            
                        client.Login(credentials)
                        string command = 
                                "&lt;COMMAND NAME=\"READ\"&gt;" +
                                "   &lt;CALCULATED&gt;True&lt;/CALCULATED&gt;" +
                                "   &lt;OUTPUT_FORMAT&gt;XML_DICT&lt;/OUTPUT_FORMAT&gt;" +
                                "   &lt;FILE_NAME&gt;LK.CUSTOMERS&lt;/FILE_NAME&gt;" +
                                "   &lt;RECORDS&gt;" +
                                "       &lt;RECORD&gt;" +
                                "           &lt;LKITEMID&gt;2&lt;/LKITEMID&gt;" + 
                                "       &lt;/RECORD&gt;" +
                                "   &lt;/RECORDS&gt;" +
                                "&lt;/COMMAND&gt;
                        result = client.SendXmlCommandAsync(command).Result
                        client.Logout()
            
                    Catch ex As Exception
            
                        Dim[error] As String = ex.Message
            			' Do something
            		End Try
            
                    Return result
              End Function
            End Class
            </code>
            </example>
        </member>
        <member name="T:Linkar.Commands.OPERATION_CODE">
            <summary>
            The codes of each operation
            </summary>
        </member>
        <member name="T:Linkar.Commands.ENVELOPE_FORMAT">
            <summary>
            Used by the SendCommand operations to indicate in which format the operation is being performed.
            </summary>
        </member>
        <member name="F:Linkar.Commands.ENVELOPE_FORMAT.XML">
            <summary>
            The operation is specified in XML format.
            </summary>
        </member>
        <member name="F:Linkar.Commands.ENVELOPE_FORMAT.JSON">
            <summary>
            The operation is specified in JSON format.
            </summary>
        </member>
        <member name="T:Linkar.Commands.DATAFORMAT_TYPE">
            <summary>
            Output format type for all operations, except Read, New, Update, Select, LkSchemas, LkProperties and GetTable
            Also The input format type for New, Update and Delete operations.
            </summary>
        </member>
        <member name="F:Linkar.Commands.DATAFORMAT_TYPE.MV">
            <summary>
            Show the results of the operation in MV format.
            </summary>
        </member>
        <member name="F:Linkar.Commands.DATAFORMAT_TYPE.XML">
            <summary>
            Show the results of the operation in XML format.
            </summary>
        </member>
        <member name="F:Linkar.Commands.DATAFORMAT_TYPE.JSON">
            <summary>
            Show the results of the operation in JSON format.
            </summary>
        </member>
    </members>
</doc>
