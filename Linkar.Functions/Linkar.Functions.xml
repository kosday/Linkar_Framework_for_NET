<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linkar.Functions</name>
    </assembly>
    <members>
        <member name="T:Linkar.MvOperations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Linkar.MvOperations.LkDCount(System.String,System.String)">
            <summary>
            Counts the delimited substrings inside a string.
            </summary>
            <param name="str">The string you are going to count.</param>
            <param name="delimiter">The separator you are going to count.</param>
            <returns>The number of occurrences found.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkCount(System.String,System.String)">
            <summary>
            Counts the occurrences of a substring inside a string.
            </summary>
            <param name="str">The string you are going to count.</param>
            <param name="delimiter">The separator you are going to count.</param>
            <returns>The number of occurrences found.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkExtract(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a field, value or subvalue from a dynamic array.
            </summary>
            <param name="str">The string on which you are going to extract a value.</param>
            <param name="field">The position of the attribute where you want to extract.</param>
            <param name="value">The multivalue position where you want to extract.</param>
            <param name="subvalue">The subvalue position where you want to extract.</param>
            <returns>A new string with the extracted value.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkExtract(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Extracts a field, value or subvalue from a dynamic array.
            </summary>
            <param name="str"></param>
            <param name="lstDicts">Dictionaries list on which the field specified argument will be searched.</param>
            <param name="field">The dictionary name of the attribute where you want to extract.</param>
            <param name="value">The multivalue position where you want to extract.</param>
            <param name="subvalue">The subvalue position where you want to extract.</param>
            <returns>A new string with the extracted value.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkChange(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces the occurrences of a substring inside a string, by other substring.
            </summary>
            <param name="str">The string on which the value is going to change.</param>
            <param name="strOld">The value to change. </param>
            <param name="strNew">The new value.</param>
            <param name="ocurrence">The new value.</param>
            <param name="start">The position from which you are going to start changing values.</param>
            <returns>A new string with replaced text.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkReplace(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces a field, value or subvalue from a dynamic array, returning the result.
            </summary>
            <param name="str">The string on which you are going to replace a value.</param>
            <param name="newVal">New value that will be replaced in the indicated string.</param>
            <param name="field">The position of the attribute where you want to replace.</param>
            <param name="value">The multivalue position where you want to replace.</param>
            <param name="subvalue">The subvalue position where you want to replace.</param>
            <returns>A new string with the replaced value.</returns>
        </member>
        <member name="M:Linkar.MvOperations.LkReplace(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces a field, value or subvalue from a dynamic array, returning the result.
            </summary>
            <param name="str">The string on which you are going to replace a value.</param>
            <param name="newVal">New value that will be replaced in the indicated string.</param>
            <param name="lstDicts">Dictionaries list on which the field specified argument will be searched.</param>
            <param name="field">The dictionary name of the attribute where you want to replace.</param>
            <param name="value">The multivalue position where you want to replace.</param>
            <param name="subvalue">The subvalue position where you want to replace.</param>
            <returns>A new string with the replaced value.</returns>
        </member>
        <member name="M:Linkar.MvOperations.GetDictPos(System.String,System.String)">
            <summary>
            Auxiliary function to obtain the position (field value) of the dictionary
            </summary>
            <param name="lstdicts">Dictionaries list on which the field specified argument will be searched.</param>
            <param name="field">The dictionary name of the attribute that you want to obtain the position</param>
            <returns>The position (filed number) of the dictionary</returns>
        </member>
        <member name="T:Linkar.OperationArguments">
            <summary>
            Auxiliary static class with functions to obtain the 3 items of every LinkarSERVER operation.
            These items are: CUSTOMVARS, OPTIONS and INPUTDATA.
            Unit Separator character (31) is used as separator between these items.
            CUSTOMVARS: String for database custom subroutines.
            OPTIONS: The options of every operation.
            INPUT: The necesary data for perform every operation.
            CUSTOMVARS US_char OPTIONS US_char INPUT
            </summary>
        </member>
        <member name="M:Linkar.OperationArguments.GetReadArgs(System.String,System.String,System.String,Linkar.ReadOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Read operation.
            </summary>
            <param name="filename">File name to read.</param>
            <param name="recordIds">The records codes list to read, separated by the Record Separator character (30). Use StringFunctions.ComposeRecordIds to compose this string.</param>
            <param name="dictionaries">List of dictionaries to read, separated by space. If this list is not set, all fields are returned.</param>
            <param name="readOptions">Object that defines the different reading options of the Function: Calculated, dictClause, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetUpdateArgs(System.String,System.String,Linkar.UpdateOptions,System.String)">
            <summary>
            Compose the 3 items ( CUSTOMVARS, OPTIONS and INPUTDATA) of the Update operation.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to update. Inside this string are the recordIds, the records, and the originalRecords. Use StringFunctions.ComposeUpdateBuffer function to compose this string.</param>
            <param name="updateOptions">Object that defines the different writing options of the Function: optimisticLockControl, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetNewArgs(System.String,System.String,Linkar.NewOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the New operation.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to write. Inside this string are the recordIds, and the records. Use StringFunctions.ComposeNewBuffer function to compose this string.</param>
            <param name="newOptions">Object that defines the following writing options of the Function: recordIdType, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetDeleteArgs(System.String,System.String,Linkar.DeleteOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Delete operation.
            </summary>
            <param name="filename">The file name where the records are going to be deleted. DICT in case of deleting a record that belongs to a dictionary.</param>
            <param name="records">The records list to be deleted. Use StringFunctions.ComposeDeleteBuffer function to compose this string.</param>
            <param name="deleteOptions">Object that defines the different Function options: optimisticLockControl, recoverRecordIdType.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetSelectArgs(System.String,System.String,System.String,System.String,System.String,Linkar.SelectOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Select operation.
            </summary>
            <param name="filename">File name where the select operation will be perform. For example LK.ORDERS</param>
            <param name="selectClause">Statement fragment specifies the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="sortClause">Statement fragment specifies the selection order. If there is a selection rule, Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="dictClause">Space-delimited list of dictionaries to read. If this list is not set, all fields are returned. For example CUSTOMER DATE ITEM</param>
            <param name="preSelectClause">An optional command that executes before the main Select</param>
            <param name="selectOptions">Object that defines the different reading options of the Function: calculated, dictionaries, conversion, formatSpec, originalRecords, onlyItemId, pagination, regPage, numPage.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetSubroutineArgs(System.String,System.Int32,System.String,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Subroutine operation.
            </summary>
            <param name="subroutineName">Subroutine name you want to execute.</param>
            <param name="argsNumber">Number of arguments</param>
            <param name="arguments">The subroutine arguments list. Use StringFunctions.ComposeSubroutineArgs function to compose this string.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetConversionArgs(System.String,System.String,Linkar.CONVERSION_TYPE,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Conversion operation.
            </summary>
            <param name="expression">The data or expression to convert. It can have MV marks, in which case the conversion will execute in each value obeying the original MV mark.</param>
            <param name="code">The conversion code. It will have to obey the Database conversions specifications.</param>
            <param name="conversionOptions">Indicates the conversion type, input or output: INPUT=ICONV(); OUTPUT=OCONV()</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetFormatArgs(System.String,System.String,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Format operation.
            </summary>
            <param name="expression">The data or expression to format. It can contain MV marks, in which case the conversion in each value will be executed according to the original MV mark.</param>
            <param name="formatSpec">Specified format</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetDictionariesArgs(System.String,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Dictionaries operation.
            </summary>
            <param name="filename">File name</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetExecuteArgs(System.String,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Execute operation.
            </summary>
            <param name="statement">The command you want to execute in the Database.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetVersionArgs">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the Version operation.
            </summary>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetLkSchemasArgs(Linkar.LkSchemasOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the LkSchemas operation.
            </summary>
            <param name="lkSchemasOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMAS, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetLkPropertiesArgs(System.String,Linkar.LkPropertiesOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the LkProperties operation.
            </summary>
            <param name="filename">File name to LkProperties</param>
            <param name="lkPropertiesOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMAS, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetGetTableArgs(System.String,System.String,System.String,System.String,Linkar.TableOptions,System.String)">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the GetTable operation.
            </summary>
            <param name="filename">File or table name defined in Linkar Schemas. Table notation is: MainTable[.MVTable[.SVTable]]</param>
            <param name="selectClause">Statement fragment specifies the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="dictClause">Space-delimited list of dictionaries to read. If this list is not set, all fields are returned. For example CUSTOMER DATE ITEM</param>
            <param name="sortClause">Statement fragment specifies the selection order. If there is a selection rule Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="tableOptions">Different function options: rowHeaders, rowProperties, onlyVisibe, usePropertyNames, repeatValues, applyConversion, applyFormat, calculated, pagination, regPage, numPage.</param>
            <param name="customVars">Free text sent to the database allows management of additional behaviours in SUB.LK.MAIN.CONTROL.CUSTOM, which is called when this parameter is set.</param>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="M:Linkar.OperationArguments.GetResetCommonBlocksArgs">
            <summary>
            Compose the 3 items (CUSTOMVARS, OPTIONS and INPUTDATA) of the ResetCommonBlocks operation.
            </summary>
            <returns>A string ready to be used in Linkar.ExecuteDirectOperation and Linkar.ExecutePermanentOperation.</returns>
        </member>
        <member name="T:Linkar.CommonOptions">
            <summary>
            Auxiliary class with the common options for ReadOptions, SelectOptions and ReadAfterCommonOptions classes
            </summary>
        </member>
        <member name="M:Linkar.CommonOptions.#ctor">
            <summary>
            Initializes a new instance of the CommonOptions class.
            </summary>
        </member>
        <member name="M:Linkar.CommonOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CommonOptions class.
            </summary>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.CommonOptions.ToString">
            <summary>
            Composes the CommonOptions options string in the way that need it by ReadOptions, SelectOptions and ReadAfterCommonOptions classes.
            </summary>
            <returns>The string ready to be manage by ReadOptions, SelectOptions and ReadAfterCommonOptions classes</returns>
        </member>
        <member name="T:Linkar.ReadAfterCommonOptions">
            <summary>
            Auxiliary class with the ReadAfters options for UpdateOptions and NewOptions classes
            </summary>
        </member>
        <member name="M:Linkar.ReadAfterCommonOptions.#ctor">
            <summary>
            Initializes a new instance of the ReadAfterCommonOptions class.
            </summary>
        </member>
        <member name="M:Linkar.ReadAfterCommonOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReadAfterCommonOptions class.
            </summary>
            <param name="readAfter">Reads the record again and returns it after the update or new. Calculated, dictionaries, conversion, formatSpec and originalRecords will only make effect if this option is true.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.ReadAfterCommonOptions.ToString">
            <summary>
            Composes the ReadAfterCommonOptions options string in the way that need it by UpdateOptions and NewOptions classes.
            </summary>
            <returns>The string ready to be manage by UpdateOptions and NewOptions classes</returns>
        </member>
        <member name="T:Linkar.ReadOptions">
            <summary>
            Object that works as an argument in Read function and defines the function options.
            </summary>
        </member>
        <member name="M:Linkar.ReadOptions.#ctor">
            <summary>
            Initializes a new instance of the ReadOptions class
            </summary>
        </member>
        <member name="M:Linkar.ReadOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReadOptions class
            </summary>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.ReadOptions.ToString">
            <summary>
            Composes the Read options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.UpdateOptions">
            <summary>
            Object that works as an argument in Update function and defines the function options.
            </summary>
        </member>
        <member name="M:Linkar.UpdateOptions.#ctor">
            <summary>
            Initializes a new instance of the UpdateOptions class.
            </summary>
        </member>
        <member name="M:Linkar.UpdateOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UpdateOptions class.
            </summary>
            <param name="optimisticLockControl">if "true", the Update function will check out if the file has not been modified by other user.</param>
            <param name="readAfter">Reads the record again and returns it after the update. Calculated, dictionaries, conversion, formatSpec and originalRecords will only make effect if this option is true.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.UpdateOptions.ToString">
            <summary>
            Composes the Update options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.NewOptions">
            <summary>
            Object that works as an argument in New function and defines the function options.
            </summary>
        </member>
        <member name="M:Linkar.NewOptions.#ctor">
            <summary>
            Initializes a new instance of the NewOptions class.
            </summary>
        </member>
        <member name="M:Linkar.NewOptions.#ctor(Linkar.RecordIdType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NewOptions class.
            </summary>
            <param name="recordIdType">Specify the different techniques for generating codes. Mandatory if no registration codes are indicated in the New functions.</param>
            <param name="readAfter">Reads the record again and returns it after the update. Calculated, dictionaries, conversion, formatSpec and originalRecords will only make effect if this option is true.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.NewOptions.ToString">
            <summary>
            Composes the New options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.RecordIdType">
            <summary>
            Object that works as an argument in NewOptions function and defines the techniques for generating codes.
            </summary>
        </member>
        <member name="M:Linkar.RecordIdType.#ctor">
            <summary>
            No code generation technique will be used. The codes must be supplied in the New operations.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Linkar.RecordIdType.#ctor(System.String,System.String,System.String)" -->
        <member name="M:Linkar.RecordIdType.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructor accepts options for generating Random type codes.
            </summary>
            <param name="numeric">Indicates if the code must be numeric.</param>
            <param name="length">Length of the code to create. It must be bigger than 0.</param>
        </member>
        <member name="M:Linkar.RecordIdType.#ctor(System.Boolean)">
            <summary>
            Constructor accepts options for generating Custom type codes.
            </summary>
            <param name="custom">It must have the value "true" so that the generation of personalized codes through the subroutine of the Database SUB.LK.MAIN.RECOVERRECORDID.CUSTOM is used. If the value is "false", no code generation technique will be used. The codes must be supplied in the New operations.</param>
        </member>
        <member name="M:Linkar.RecordIdType.ToString">
            <summary>
            Composes the RecordIdType options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.DeleteOptions">
            <summary>
            Object that works as an argument in Delete function and defines the function options.
            </summary>
        </member>
        <member name="M:Linkar.DeleteOptions.#ctor">
            <summary>
            Initializes a new instance of the DeleteOptions class
            </summary>
        </member>
        <member name="M:Linkar.DeleteOptions.#ctor(System.Boolean,Linkar.RecoverIdType)">
            <summary>
            Initializes a new instance of the DeleteOptions class
            </summary>
            <param name="optimisticLockControl">In the execution of the Delete function, before updating the record, checks out if the record has not been modified by other user.</param>
            <param name="recoverIdType">Specifies the different recovery techniques of deleted codes.</param>
        </member>
        <member name="M:Linkar.DeleteOptions.ToString">
            <summary>
            Composes the Delete options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.RecoverIdType">
            <summary>
            Object that works as an argument in DeleteOptions function and defines the techniques for recovering deleted codes.
            </summary>
        </member>
        <member name="M:Linkar.RecoverIdType.#ctor">
            <summary>
            No code recovery technique will be used.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Linkar.RecoverIdType.#ctor(System.String,System.String)" -->
        <member name="M:Linkar.RecoverIdType.#ctor(System.Boolean)">
            <summary>
            The technique of recovering deleted Custom type codes will be used.
            </summary>
            <param name="custom">It must have the value "true" so that the recovery of deleted codes is used through the subroutine of the Database SUB.LK.MAIN.RECOVERRECORDID.CUSTOM. If the value is "false", no technique to recover deleted codes will be used.</param>
        </member>
        <member name="M:Linkar.RecoverIdType.ToString">
            <summary>
            Composes the RecoverIdType options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.SelectOptions">
            <summary>
            Object that works as an argument in Select function and defines the function options.
            </summary>
        </member>
        <member name="M:Linkar.SelectOptions.#ctor">
            <summary>
            Initializes a new instance of the SelectOptions class.
            </summary>
        </member>
        <member name="M:Linkar.SelectOptions.#ctor(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SelectOptions class.
            </summary>
            <param name="onlyRecordId">Returns just the selected records codes.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="conversion">Execute the defined conversions in the dictionaries before returning.</param>
            <param name="formatSpec">Execute the defined formats in the dictionaries before returning.</param>
            <param name="originalRecords">Return a copy of the records in MV format.</param>
        </member>
        <member name="M:Linkar.SelectOptions.ToString">
            <summary>
            Composes the Select options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.LkSchemasOptions">
            <summary>
            Contains the options to obtain different types of schemas with the LkSchemas function.
            </summary>
        </member>
        <member name="M:Linkar.LkSchemasOptions.#ctor">
            <summary>
            Initializes a new instance of the LkSchemasOptions class.
            The object is created with the default values for LKSCHEMAS type schemas.
            </summary>
        </member>
        <member name="M:Linkar.LkSchemasOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkSchemasOptions class.
            Constructor of object used to obtain LKSCHEMAS type schemas.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="rowProperties">First row contains property names.</param>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkSchemasOptions.#ctor(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkSchemasOptions class.
            Constructor of object used to obtain SQLMODE type schemas.Creation options are allowed for SQLMODE type schemas.
            </summary>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkSchemasOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkSchemasOptions class.
            Constructor of object used to obtain DICTIONARIES type schemas.Creation options are allowed for DICTIONARIES type schemas.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkSchemasOptions.ToString">
            <summary>
            Composes the LkSchemas options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.LkPropertiesOptions">
            <summary>
            Contains the options to obtain the list of Properties of the different types of schemas with the LkProperties function.
            </summary>
        </member>
        <member name="M:Linkar.LkPropertiesOptions.#ctor">
            <summary>
            Initializes a new instance of the LkPropertiesOptions class.
            The object is created with the default values for list of Schema Properties of LKSCHEMAS type.
            </summary>
        </member>
        <member name="M:Linkar.LkPropertiesOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkPropertiesOptions class.
            Constructor of object used to obtain a list of Properties of the LKSCHEMAS schema type.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="rowProperties">First row contains property names.</param>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="usePropertyNames">Use Properties and Table names.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkPropertiesOptions.#ctor(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkPropertiesOptions class.
            Constructor of object used to obtain a list of Properties of the SQLMODE schema type.
            </summary>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkPropertiesOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LkPropertiesOptions class.
            Constructor of object used to obtain a list of Properties of the DICTIONARIES schema type.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.LkPropertiesOptions.ToString">
            <summary>
            Composes the LkProperties options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.TableOptions">
            <summary>
            It contains the options to perform queries with the GetTable function, using the different types of schemas.
            </summary>
        </member>
        <member name="M:Linkar.TableOptions.#ctor">
            <summary>
            Initializes a new instance of the TableOptions class.
            The object is created with the default values for queries with LKSCHEMAS type schemas.
            </summary>
        </member>
        <member name="M:Linkar.TableOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableOptions class.
            Constructor of object used to obtain queries of the LKSCHEMAS schema type.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="rowProperties">First row contains property names.</param>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="usePropertyNames">Use Properties and Table names.</param>
            <param name="repeatValues">Repeat common atributes in MV and SV groups.</param>
            <param name="applyConversion">Execute Conversions: With Dictionaries, conversion defined in the dictionary. With Schemas conversions defined in Linkar Schemas.</param>
            <param name="applyFormat">Execute Formats. With Dictionaries, formats defined in the dictionary. With Schemas formats defined in Linkar Schemas.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.TableOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableOptions class.
            Constructor of object used to perform queries of the SQLMODE type schemas.
            </summary>
            <param name="onlyVisibles">Use only Visible Schemas and Properties.</param>
            <param name="applyConversion">Execute Conversions: With Dictionaries, conversion defined in the dictionary. With Schemas conversions defined in Linkar Schemas.</param>
            <param name="applyFormat">Execute Formats. With Dictionaries, formats defined in the dictionary. With Schemas formats defined in Linkar Schemas.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.TableOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableOptions class.
            Constructor of object used to perform queries of the DICTIONARIES type schemas.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="repeatValues">Repeat common atributes in MV and SV groups.</param>
            <param name="applyConversion">Execute Conversions: With Dictionaries, conversion defined in the dictionary. With Schemas conversions defined in Linkar Schemas.</param>
            <param name="applyFormat">Execute Formats. With Dictionaries, formats defined in the dictionary. With Schemas formats defined in Linkar Schemas.</param>
            <param name="calculated">Return the resulting values from the calculated dictionaries.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.TableOptions.#ctor(Linkar.RowHeaders.TYPE,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableOptions class.
            Constructor of object used to perform queries without schema information.
            </summary>
            <param name="rowHeaders">Include headings in first row MAINLABEL (main headings), SHORTLABEL (short label headings), and NONE (without headings).</param>
            <param name="repeatValues">Repeat common atributes in MV and SV groups.</param>
            <param name="pagination">Indicates if pagination is being used or not.</param>
            <param name="regPage">In case of pagination indicates the number of records by page. It must be bigger than 0.</param>
            <param name="numPage">In case of pagination it indicates the page number to obtain. Must be greater than 0.</param>
        </member>
        <member name="M:Linkar.TableOptions.ToString">
            <summary>
            Composes the GetTable options string in the way that LinkarSERVER can manage it.
            </summary>
            <returns>The string ready to be manage by LinkarSERVER.</returns>
        </member>
        <member name="T:Linkar.DATAFORMAT_TYPE">
            <summary>
            Output format type for all operations, except Read, New, Update, Select, LkSchemas, LkProperties and GetTable
            Also The input format type for New, Update and Delete operations.
            </summary>
        </member>
        <member name="T:Linkar.DATAFORMATCRU_TYPE">
            <summary>
            Output format type for Read, New, Update and Select operations.
            </summary>
        </member>
        <member name="T:Linkar.DATAFORMATSCH_TYPE">
            <summary>
            Output format type for LkSchemas and LkProperties operations.
            </summary>
        </member>
    </members>
</doc>
