<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linkar.Commands</name>
    </assembly>
    <members>
        <member name="M:Linkar.Commands.DirectFunctions.SendCommand(Linkar.CredentialOptions,System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format (XML, JSON), in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.Direct.JsonCommands">
            <summary>
            Allows making different operations, through some templates in standard format JSON, synchronously and asynchronously.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Direct.JsonCommands.SendCommand(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format JSON, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>        /// <returns>The results of the operation.</returns>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Direct.JsonCommands.SendCommandAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format JSON, in a asynchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.Direct.XmlCommands">
            <summary>
            Allows making different operations, through some templates in standard format XML, synchronously and asynchronously.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Direct.XmlCommands.SendCommand(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format XML, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param> 
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Direct.XmlCommands.SendCommandAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format XML, in a asynchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.Persistent.LinkarClient">
            <summary>
            These functions perform synchronous persistent (establishing permanent session) operations with any kind of output format type.
            </summary>
        </member>
        <member name="P:Linkar.Commands.Persistent.LinkarClient.SessionID">
            <summary>
            SessionID of the connection.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinkarClt class.
            </summary>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely). When the receiveTimeout argument is omitted in any operation, the value set here will be applied.</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.Login(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.Logout(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, in a synchronous way.
            </summary>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.LinkarClient.SendCommand(System.String,Linkar.Commands.ENVELOPE_FORMAT,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format (XML, JSON), in a synchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="commandFormat">Indicates in what format you are doing the operation: XML or JSON.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.Persistent.JSON.LinkarClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Linkar.Commands.Persistent.JSON.LinkarClient.SessionID">
            <summary>
            SessionID of the connection.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Persistent.JSON.LinkarClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinkarClt class.
            </summary>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely). When the receiveTimeout argument is omitted in any operation, the value set here will be applied.</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.JSON.LinkarClient.Login(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.JSON.LinkarClient.Logout(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, in a synchronous way.
            </summary>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.JSON.LinkarClient.SendCommand(System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format JSON, in a synchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>        /// <returns>The results of the operation.</returns>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Persistent.JSON.LinkarClient.SendCommandAsync(System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format JSON, in a asynchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.Persistent.XML.LinkarClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Linkar.Commands.Persistent.XML.LinkarClient.SessionID">
            <summary>
            SessionID of the connection.
            </summary>
        </member>
        <member name="M:Linkar.Commands.Persistent.XML.LinkarClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinkarClt class.
            </summary>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely). When the receiveTimeout argument is omitted in any operation, the value set here will be applied.</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.XML.LinkarClient.Login(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.XML.LinkarClient.Logout(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, in a synchronous way.
            </summary>
            <param name="customVars">Free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Commands.Persistent.XML.LinkarClient.SendCommand(System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format XML, in a synchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>        /// <returns>The results of the operation.</returns>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Commands.Persistent.XML.LinkarClient.SendCommandAsync(System.String,System.Int32)">
            <summary>
            Allows making different operations, through some templates in standard format XML, in a asynchronous way.
            </summary>
            <param name="command">Content of the operation you want to send.</param>
            <param name="receiveTimeout">The maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="T:Linkar.Commands.DATAFORMAT_TYPE">
            <summary>
            Output format type for all operations, except Read, New, Update, Select, LkSchemas, LkProperties and GetTable
            Also The input format type for New, Update and Delete operations.
            </summary>
        </member>
    </members>
</doc>
