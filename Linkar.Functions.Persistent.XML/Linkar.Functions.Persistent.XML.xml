<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linkar.Functions.Persistent.XML</name>
    </assembly>
    <members>
        <member name="T:Linkar.Functions.Persistent.XML.XML_FORMAT">
            <summary>
            XML output formats for Read, Update, New and Select
            </summary>
        </member>
        <member name="F:Linkar.Functions.Persistent.XML.XML_FORMAT.XML">
            <summary>
            Show the results of the operation in XML format.
            </summary>
        </member>
        <member name="F:Linkar.Functions.Persistent.XML.XML_FORMAT.XML_DICT">
            <summary>
            Show the results of the operation in XML_DICT format, using the dictionaries.
            </summary>
        </member>
        <member name="F:Linkar.Functions.Persistent.XML.XML_FORMAT.XML_SCH">
            <summary>
            Show the results of the operation in XML_SCH format, using the schema properties.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Linkar.Functions.Persistent.XML.LinkarClient" -->
        <member name="P:Linkar.Functions.Persistent.XML.LinkarClient.SessionId">
            <summary>
            A unique Identifier for the stablished session in LinkarSERVER. This value is set after Login operation.
            </summary>
        </member>
        <member name="P:Linkar.Functions.Persistent.XML.LinkarClient.PublicKey">
            <summary>
            The public key used to encrypt transmission data between LinkarCLIENT and LinkarSERVER. This value is set after Login operation.
            </summary>
        </member>
        <member name="P:Linkar.Functions.Persistent.XML.LinkarClient.LkConnectionId">
            <summary>
            Internal LinkarSERVER ID to keep the session. This value is set after Login operation.
            </summary>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinkarClient class.
            </summary>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely). When the receiveTimeout argument is omitted in any operation, the value set here will be applied.</param>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Login(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Starts the communication with a server allowing making use of the rest of functions until the Close method is executed or the connection with the server gets lost, in a synchronous way.
            </summary>
            <param name="credentialOptions">Object that defines the necessary data to access to the Linkar Server: Username, Password, EntryPoint, Language, FreeText.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Logout(System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, in a synchronous way.
            </summary>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Read(System.String,System.String,System.String,Linkar.ReadOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Reads one or several records of a file in a synchronous way with XML output format.
            </summary>
            <param name="filename">File name to read.</param>
            <param name="records">It's the records codes list to read, separated by the Record Separator character (30). Use StringFunctions.ComposeRecordIds to compose this string</param>
            <param name="dictionaries">List of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer.</param>
            <param name="readOptions">Object that defines the different reading options of the Function: Calculated, dictClause, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">'s a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Update(System.String,System.String,Linkar.UpdateOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Update one or several records of a file, in a synchronous way with XML input and output format.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to update. Inside this string are the recordIds, the records, and the originalRecords. Use StringFunctions.ComposeUpdateBuffer function to compose this string.</param>
            <param name="updateOptions">Object that defines the different writing options of the Function: optimisticLockControl, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.New(System.String,System.String,Linkar.NewOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Creates one or several records of a file, in a synchronous way with XML input and output format.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to write. Inside this string are the recordIds, and the records. Use StringFunctions.ComposeNewBuffer function to compose this string.</param>
            <param name="newOptions">Object that defines the following writing options of the Function: recordIdType, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Delete(System.String,System.String,Linkar.DeleteOptions,System.String,System.Int32)">
            <summary>
            Deletes one or several records in file, in a synchronous way with XML output format.
            </summary>
            <param name="filename">It's the file name where the records are going to be deleted. DICT in case of deleting a record that belongs to a dictionary.</param>
            <param name="records">It's the records list to be deleted. Use StringFunctions.ComposeDeleteBuffer function to compose this string.</param>
            <param name="deleteOptions">Object that defines the different Function options: optimisticLockControl, recoverRecordIdType.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Select(System.String,System.String,System.String,System.String,System.String,Linkar.SelectOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Executes a Query in the Database, in a synchronous way with XML output format.
            </summary>
            <param name="filename">File name where the select operation will be perform. For example LK.ORDERS</param>
            <param name="selectClause">Fragment of the phrase that indicate the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="sortClause">Fragment of the phrase that indicates the selection order. If there is a selection rule, Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="dictClause">Is the list of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer. For example CUSTOMER DATE ITEM</param>
            <param name="preSelectClause">It's an optional statement that will execute before the main Select</param>
            <param name="selectOptions">Object that defines the different reading options of the Function: calculated, dictionaries, conversion, formatSpec, originalRecords, onlyItemId, pagination, regPage, numPage.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Subroutine(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Executes a subroutine, in a synchronous way with XML output format.
            </summary>
            <param name="subroutineName">Subroutine name you want to execute.</param>
            <param name="argsNumber">Number of arguments</param>
            <param name="arguments">The subroutine arguments list.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Conversion(Linkar.CONVERSION_TYPE,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the result of executing ICONV() or OCONV() functions from a expression list in the Database, in a synchronous way with XML output format.
            </summary>
            <param name="conversionOptions">Indicates the conversion type, input or output: Input=ICONV(); OUTPUT=OCONV()</param>
            <param name="expression">The data or expression to convert. It can have MV marks, in which case the conversion will execute in each value obeying the original MV mark.</param>
            <param name="code">The conversion code. It will have to obey the Database conversions specifications.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Format(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the result of executing the FMT function in a expressions list in the Database, in a synchronous way with XML output format.
            </summary>
            <param name="expression">The data or expression to format. It can contain MV marks, in which case the conversion in each value will be executed according to the original MV mark.</param>
            <param name="formatSpec">Specified format</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Dictionaries(System.String,System.String,System.Int32)">
            <summary>
            Returns all the dictionaries of a file, in a synchronous way with XML output format.
            </summary>
            <param name="filename">File name</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.Execute(System.String,System.String,System.Int32)">
            <summary>
            Allows the execution of any command from the Database in a synchronous way with XML output format.
            </summary>
            <param name="statement">The command you want to execute in the Database.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.GetLocalVersion">
            <summary>
            Allows getting the client version.
            </summary>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.GetVersion(System.Int32)">
            <summary>
            Allows getting the server version, in a synchronous way with XML output format.
            </summary>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LkSchemas(Linkar.LkSchemaOptions,System.String,System.Int32)">
            <summary>
            Returns a list of all the Schemas defined in Linkar Schemas, or the EntryPoint account data files, in a synchronous way with XML output format.
            </summary>
            <param name="lkSchemaOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMA, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LkProperties(System.String,Linkar.LkPropertiesOptions,System.String,System.Int32)">
            <summary>
            Returns the Schema properties list defined in Linkar Schemas or the file dictionaries, in a synchronous way with XML output format.
            </summary>
            <param name="filename">File name to LkProperties</param>
            <param name="lkPropertiesOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMA, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.GetTable(System.String,System.String,System.String,System.String,Linkar.TableOptions,System.String,System.Int32)">
            <summary>
            Returns a query result in a table format, in a synchronous way.
            </summary>
            <param name="filename">File or table name defined in Linkar Schemas. Table notation is: MainTable[.MVTable[.SVTable]]</param>
            <param name="selectClause">Fragment of the phrase that indicate the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="dictClause">Is the list of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer. For example CUSTOMER DATE ITEM</param>
            <param name="sortClause">Fragment of the phrase that indicates the selection order. If there is a selection rule Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="tableOptions">Different function options: rowHeaders, rowProperties, onlyVisibe, usePropertyNames, repeatValues, applyConversion, applyFormat, calculated, pagination, regPage, numPage.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.ResetCommonBlocks(System.Int32)">
            <summary>
            Resets the COMMON variables with the 100 most used files in a synchronous way with XML output format.
            </summary>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LoginAsync(Linkar.CredentialOptions,System.String,System.Int32)">
            <summary>
            Closes the communication with the server, that previously has been opened with a Login function, ina asynchronous way.
            </summary>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LogoutAsync(System.String,System.Int32)">
            <summary>
            Reads one or several records of a file ina asynchronous way with XML output format.
            </summary>
            <param name="filename">File name to read.</param>
            <param name="records">It's the records codes list to read, separated by the Record Separator character (30). Use StringFunctions.ComposeRecordIds to compose this string</param>
            <param name="dictionaries">List of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer.</param>
            <param name="readOptions">Object that defines the different reading options of the Function: Calculated, dictClause, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">'s a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.ReadAsync(System.String,System.String,System.String,Linkar.ReadOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Reads one or several records of a file ina asynchronous way with XML output format.
            </summary>
            <param name="filename">File name to read.</param>
            <param name="records">It's the records codes list to read, separated by the Record Separator character (30). Use StringFunctions.ComposeRecordIds to compose this string</param>
            <param name="dictionaries">List of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer.</param>
            <param name="readOptions">Object that defines the different reading options of the Function: Calculated, dictClause, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">'s a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.UpdateAsync(System.String,System.String,Linkar.UpdateOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Update one or several records of a file, ina asynchronous way with XML input and output format.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to update. Inside this string are the recordIds, the records, and the originalRecords. Use StringFunctions.ComposeUpdateBuffer function to compose this string.</param>
            <param name="updateOptions">Object that defines the different writing options of the Function: optimisticLockControl, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.NewAsync(System.String,System.String,Linkar.NewOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Creates one or several records of a file, ina asynchronous way with XML input and output format.
            </summary>
            <param name="filename">File name where you are going to write.</param>
            <param name="records">Are the records you want to write. Inside this string are the recordIds, and the records. Use StringFunctions.ComposeNewBuffer function to compose this string.</param>
            <param name="newOptions">Object that defines the following writing options of the Function: recordIdType, readAfter, calculated, dictionaries, conversion, formatSpec, originalRecords.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.DeleteAsync(System.String,System.String,Linkar.DeleteOptions,System.String,System.Int32)">
            <summary>
            Deletes one or several records in file, ina asynchronous way with XML output format.
            </summary>
            <param name="filename">It's the file name where the records are going to be deleted. DICT in case of deleting a record that belongs to a dictionary.</param>
            <param name="records">It's the records list to be deleted. Use StringFunctions.ComposeDeleteBuffer function to compose this string.</param>
            <param name="deleteOptions">Object that defines the different Function options: optimisticLockControl, recoverRecordIdType.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.SelectAsync(System.String,System.String,System.String,System.String,System.String,Linkar.SelectOptions,Linkar.Functions.Persistent.XML.XML_FORMAT,System.String,System.Int32)">
            <summary>
            Executes a Query in the Database, ina asynchronous way with XML output format.
            </summary>
            <param name="filename">File name where the select operation will be perform. For example LK.ORDERS</param>
            <param name="selectClause">Fragment of the phrase that indicate the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="sortClause">Fragment of the phrase that indicates the selection order. If there is a selection rule, Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="dictClause">Is the list of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer. For example CUSTOMER DATE ITEM</param>
            <param name="preSelectClause">It's an optional statement that will execute before the main Select</param>
            <param name="selectOptions">Object that defines the different reading options of the Function: calculated, dictionaries, conversion, formatSpec, originalRecords, onlyItemId, pagination, regPage, numPage.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.SubroutineAsync(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Executes a subroutine, ina asynchronous way with XML output format.
            </summary>
            <param name="subroutineName">Subroutine name you want to execute.</param>
            <param name="argsNumber">Number of arguments</param>
            <param name="arguments">The subroutine arguments list.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.ConversionAsync(Linkar.CONVERSION_TYPE,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the result of executing ICONV() or OCONV() functions from a expression list in the Database, ina asynchronous way with XML output format.
            </summary>
            <param name="conversionOptions">Indicates the conversion type, input or output: Input=ICONV(); OUTPUT=OCONV()</param>
            <param name="expression">The data or expression to convert. It can have MV marks, in which case the conversion will execute in each value obeying the original MV mark.</param>
            <param name="code">The conversion code. It will have to obey the Database conversions specifications.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.FormatAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the result of executing the FMT function in a expressions list in the Database, ina asynchronous way with XML output format.
            </summary>
            <param name="expression">The data or expression to format. It can contain MV marks, in which case the conversion in each value will be executed according to the original MV mark.</param>
            <param name="formatSpec">Specified format</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.DictionariesAsync(System.String,System.String,System.Int32)">
            <summary>
            Returns all the dictionaries of a file, ina asynchronous way with XML output format.
            </summary>
            <param name="filename">File name</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.ExecuteAsync(System.String,System.String,System.Int32)">
            <summary>
            Allows the execution of any command from the Database ina asynchronous way with XML output format.
            </summary>
            <param name="statement">The command you want to execute in the Database.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.GetVersionAsync(System.Int32)">
            <summary>
            Allows getting the server version, ina asynchronous way with XML output format.
            </summary>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LkSchemasAsync(Linkar.LkSchemaOptions,System.String,System.Int32)">
            <summary>
            Returns a list of all the Schemas defined in Linkar Schemas, or the EntryPoint account data files, ina asynchronous way with XML output format.
            </summary>
            <param name="lkSchemaOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMA, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.LkPropertiesAsync(System.String,Linkar.LkPropertiesOptions,System.String,System.Int32)">
            <summary>
            Returns the Schema properties list defined in Linkar Schemas or the file dictionaries, ina asynchronous way with XML output format.
            </summary>
            <param name="filename">File name to LkProperties</param>
            <param name="lkPropertiesOptions">This object defines the different options in base of the asked Schema Type: LKSCHEMA, SQLMODE o DICTIONARIES.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.GetTableAsync(System.String,System.String,System.String,System.String,Linkar.TableOptions,System.String,System.Int32)">
            <summary>
            Returns a query result in a table format, ina asynchronous way.
            </summary>
            <param name="filename">File or table name defined in Linkar Schemas. Table notation is: MainTable[.MVTable[.SVTable]]</param>
            <param name="selectClause">Fragment of the phrase that indicate the selection condition. For example WITH CUSTOMER = '1'</param>
            <param name="dictClause">Is the list of dictionaries to read, separated by space. If dictionaries are not indicated the function will read the complete buffer. For example CUSTOMER DATE ITEM</param>
            <param name="sortClause">Fragment of the phrase that indicates the selection order. If there is a selection rule Linkar will execute a SSELECT, otherwise Linkar will execute a SELECT. For example BY CUSTOMER</param>
            <param name="tableOptions">Different function options: rowHeaders, rowProperties, onlyVisibe, usePropertyNames, repeatValues, applyConversion, applyFormat, calculated, pagination, regPage, numPage.</param>
            <param name="customVars">It's a free text that will travel until the database to make the admin being able to manage additional behaviours in the standard routine SUB.LK.MAIN.CONTROL.CUSTOM. This routine will be called if the argument has content.</param>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
        <member name="M:Linkar.Functions.Persistent.XML.LinkarClient.ResetCommonBlocksAsync(System.Int32)">
            <summary>
            Resets the COMMON variables with the 100 most used files ina asynchronous way with XML output format.
            </summary>
            <param name="receiveTimeout">It's the maximum time in seconds that the client will keep waiting the answer by the server. By default 0 (wait indefinitely).</param>
            <returns>The results of the operation.</returns>
        </member>
    </members>
</doc>
